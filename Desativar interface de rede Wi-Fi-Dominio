# Lista de máquinas para teste
$computadores = @("HPLTITESTEX1", "desk1", "HPLSALUXPN02")  # Substitua pelos nomes reais ou IPs

# Caminho do log (salvo no mesmo diretório do script)
$logSaida = ".\log_desativacao_wifi_remoto.csv"

# Cabeçalho do log
if (-not (Test-Path $logSaida)) {
    "DataHora;Computador;Status;Mensagem" | Out-File -FilePath $logSaida -Encoding UTF8
}

# Solicita credenciais do administrador de domínio
$credencial = Get-Credential -Message "Digite as credenciais de administrador do domínio"

# Define opções de sessão remota com timeout reduzido
$sessionOptions = New-PSSessionOption -OperationTimeout 60000  # 60 segundos

# Loop nas máquinas
foreach ($computador in $computadores) {
    $dataHora = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "`n[$dataHora] Verificando comunicação com $computador..."

    # Teste de ping
    if (Test-Connection -ComputerName $computador -Count 2 -Quiet) {
        Write-Host "Ping OK. Verificando WinRM..."

        # Verifica se WinRM está acessível
        if (Test-WSMan -ComputerName $computador -ErrorAction SilentlyContinue) {
            Write-Host "WinRM está acessível em $computador. Tentando desativar interface Wi-Fi..."

            try {
                Invoke-Command -ComputerName $computador -Credential $credencial -SessionOption $sessionOptions -ScriptBlock {
                    $interface = Get-NetAdapter | Where-Object { $_.Name -eq "Wi-Fi" }
                    if ($interface) {
                        Disable-NetAdapter -Name "Wi-Fi" -Confirm:$false
                        Write-Output "Sucesso;Interface Wi-Fi desabilitada com sucesso"
                    } else {
                        Write-Output "Aviso;Interface Wi-Fi não encontrada"
                    }
                } -ErrorAction Stop | ForEach-Object {
                    "$dataHora;$computador;$($_.Split(';')[0]);$($_.Split(';')[1])" | Out-File -FilePath $logSaida -Append -Encoding UTF8
                    Write-Host ($computador + ": " + $_.Split(';')[1])
                }
            } catch {
                "$dataHora;$computador;Erro;$($_.Exception.Message)" | Out-File -FilePath $logSaida -Append -Encoding UTF8
                Write-Host ("Erro ao executar comando remoto em " + $computador + ": " + $_.Exception.Message)
            }
        } else {
            "$dataHora;$computador;Falha;WinRM não está acessível" | Out-File -FilePath $logSaida -Append -Encoding UTF8
            Write-Host "WinRM não está acessível em $computador. Verifique se o serviço está habilitado e o firewall permite conexões."
        }
    } else {
        "$dataHora;$computador;Falha;Ping não respondeu" | Out-File -FilePath $logSaida -Append -Encoding UTF8
        Write-Host "Ping falhou para $computador. Máquina pode estar offline ou inacessível."
    }
}
